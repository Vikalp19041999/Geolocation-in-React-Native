var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");var _reactNative=require("react-native");var _=_interopRequireDefault(require("../"));var _utils=require("../utils");jest.mock('../utils',function(){return{logError:jest.fn(),warning:jest.fn()};});describe('react-native-geolocation',function(){afterEach(function(){_.default.stopObserving();});it('should set the location observer configuration',function(){_.default.setRNConfiguration({skipPermissionRequests:true});expect(_reactNative.NativeModules.RNCGeolocation.setConfiguration.mock.calls.length).toEqual(1);});it('should request authorization for location requests',function(){_.default.requestAuthorization();expect(_reactNative.NativeModules.RNCGeolocation.requestAuthorization.mock.calls.length).toEqual(1);});it('should get the current position and pass it to the given callback',function(){var callback=function callback(){};_.default.getCurrentPosition(callback);expect(_reactNative.NativeModules.RNCGeolocation.getCurrentPosition.mock.calls.length).toEqual(1);expect(_reactNative.NativeModules.RNCGeolocation.getCurrentPosition.mock.calls[0][1]).toBe(callback);});it('should add a success listener to the geolocation',function(){var watchID=_.default.watchPosition(function(){});expect(watchID).toEqual(0);expect(_reactNative.NativeModules.RNCGeolocation.addListener.mock.calls[0][0]).toBe('geolocationDidChange');});it('should add an error listener to the geolocation',function(){var watchID=_.default.watchPosition(function(){},function(){});expect(watchID).toEqual(0);expect(_reactNative.NativeModules.RNCGeolocation.addListener.mock.calls[1][0]).toBe('geolocationError');});it('should clear the listeners associated with a watchID',function(){var watchID=_.default.watchPosition(function(){},function(){});_.default.clearWatch(watchID);expect(_reactNative.NativeModules.RNCGeolocation.stopObserving.mock.calls.length).toBe(1);});it('should correctly assess if all listeners have been cleared',function(){var watchID=_.default.watchPosition(function(){},function(){});_.default.watchPosition(function(){},function(){});_.default.clearWatch(watchID);expect(_reactNative.NativeModules.RNCGeolocation.stopObserving.mock.calls.length).toBe(0);});it('should not fail if the watchID one wants to clear does not exist',function(){_.default.watchPosition(function(){},function(){});_.default.clearWatch(42);expect(_reactNative.NativeModules.RNCGeolocation.stopObserving.mock.calls.length).toBe(0);});it('should stop observing and warn about removing existing subscriptions',function(){var mockWarningCallback=jest.fn();_utils.warning.mockImplementation(mockWarningCallback);_.default.watchPosition(function(){},function(){});_.default.stopObserving();expect(_reactNative.NativeModules.RNCGeolocation.stopObserving.mock.calls.length).toBe(1);expect(mockWarningCallback.mock.calls.length).toBeGreaterThanOrEqual(1);});});
//# sourceMappingURL=Geolocation-test.js.map