{"version":3,"sources":["Geolocation-test.js"],"names":["NativeModules","Geolocation","jest","mock","logError","fn","warning","describe","afterEach","stopObserving","it","setRNConfiguration","skipPermissionRequests","expect","RNCGeolocation","setConfiguration","calls","length","toEqual","requestAuthorization","callback","getCurrentPosition","toBe","watchID","watchPosition","addListener","clearWatch","mockWarningCallback","mockImplementation","toBeGreaterThanOrEqual"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {NativeModules} from 'react-native';\nimport Geolocation from '../';\n\njest.mock('../utils', () => {\n  return {\n    logError: jest.fn(),\n    warning: jest.fn(),\n  };\n});\nimport {warning} from '../utils';\n\ndescribe('react-native-geolocation', () => {\n  afterEach(() => {\n    Geolocation.stopObserving();\n  });\n\n  it('should set the location observer configuration', () => {\n    Geolocation.setRNConfiguration({skipPermissionRequests: true});\n    expect(\n      NativeModules.RNCGeolocation.setConfiguration.mock.calls.length,\n    ).toEqual(1);\n  });\n\n  it('should request authorization for location requests', () => {\n    Geolocation.requestAuthorization();\n    expect(\n      NativeModules.RNCGeolocation.requestAuthorization.mock.calls.length,\n    ).toEqual(1);\n  });\n\n  it('should get the current position and pass it to the given callback', () => {\n    const callback = () => {};\n    Geolocation.getCurrentPosition(callback);\n    expect(\n      NativeModules.RNCGeolocation.getCurrentPosition.mock.calls.length,\n    ).toEqual(1);\n    expect(\n      NativeModules.RNCGeolocation.getCurrentPosition.mock.calls[0][1],\n    ).toBe(callback);\n  });\n\n  it('should add a success listener to the geolocation', () => {\n    const watchID = Geolocation.watchPosition(() => {});\n    expect(watchID).toEqual(0);\n    expect(NativeModules.RNCGeolocation.addListener.mock.calls[0][0]).toBe(\n      'geolocationDidChange',\n    );\n  });\n\n  it('should add an error listener to the geolocation', () => {\n    const watchID = Geolocation.watchPosition(() => {}, () => {});\n    expect(watchID).toEqual(0);\n    expect(NativeModules.RNCGeolocation.addListener.mock.calls[1][0]).toBe(\n      'geolocationError',\n    );\n  });\n\n  it('should clear the listeners associated with a watchID', () => {\n    const watchID = Geolocation.watchPosition(() => {}, () => {});\n    Geolocation.clearWatch(watchID);\n    expect(NativeModules.RNCGeolocation.stopObserving.mock.calls.length).toBe(\n      1,\n    );\n  });\n\n  it('should correctly assess if all listeners have been cleared', () => {\n    const watchID = Geolocation.watchPosition(() => {}, () => {});\n    Geolocation.watchPosition(() => {}, () => {});\n    Geolocation.clearWatch(watchID);\n    expect(NativeModules.RNCGeolocation.stopObserving.mock.calls.length).toBe(\n      0,\n    );\n  });\n\n  it('should not fail if the watchID one wants to clear does not exist', () => {\n    Geolocation.watchPosition(() => {}, () => {});\n    Geolocation.clearWatch(42);\n    expect(NativeModules.RNCGeolocation.stopObserving.mock.calls.length).toBe(\n      0,\n    );\n  });\n\n  it('should stop observing and warn about removing existing subscriptions', () => {\n    const mockWarningCallback = jest.fn();\n    warning.mockImplementation(mockWarningCallback);\n\n    Geolocation.watchPosition(() => {}, () => {});\n    Geolocation.stopObserving();\n    expect(NativeModules.RNCGeolocation.stopObserving.mock.calls.length).toBe(\n      1,\n    );\n    expect(mockWarningCallback.mock.calls.length).toBeGreaterThanOrEqual(1);\n  });\n});\n"]}